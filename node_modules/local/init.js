var http = require('http'),
    path = require('path'),
    fs = require('fs'),
    mongoose = require('mongoose'),
    logger = new (require('caterpillar').Logger)({ level: 7 }),
    loggerFilter = new (require('caterpillar-filter').Filter)(),
    loggerHuman  = new (require('caterpillar-human').Human)(),
    util = require('util'),
    events = require('events');

http.globalAgent.maxSockets = 50;

/* GLOBALS */
ENV_PROD = 'production';
ENV_DEV = 'development';
ENV = process.env.NODE_ENV || ENV_DEV;

PATHS = {};
PATHS.APP = path.resolve(__dirname, '../..');
PATHS.LIBS = PATHS.APP + '/node_modules/local';

G_EVENTS = new events.EventEmitter();

isMockDataGeneration = false;

fs.readdirSync(PATHS.APP).forEach(function(fileName) {
    var pathToFile = PATHS.APP + '/' + fileName,
        stat = fs.statSync(pathToFile);

    if (stat.isDirectory()) {
        PATHS[fileName.toUpperCase()] = pathToFile;
    }
});

logger.pipe(loggerFilter).pipe(loggerHuman).pipe(process.stdout);

logger.pipe(require('fs').createWriteStream(PATHS.APP + '/debug.log'));

log = logger.log.bind(logger);

Q = require('q');

_ = require('underscore');

controllers = {};
models = {};

helpers = require(PATHS.LIBS + '/helpers');
config = require(PATHS.LIBS + '/config');

// dbq = require(PATHS.LIBS + '/dbQuery');

/* End GLOBALS */


(function() {

    //Init controllers
    (function (){
        var controllersDir = PATHS.CONTROLLERS;

        readDir(controllersDir, function(pathToFile) {
            var controller = require(pathToFile);

            // TODO: name is required
            // TODO: async init ?

            if (controller.init) {
                controller.init();
            }

            if (!controller.isAbstract) {
                controllers[controller.name] = controller;
            }
        });
    }());

    //Init models
    (function (){
        var modelsDir = PATHS.MODELS;

        readDir(modelsDir, function(pathToFile) {
            var model = require(pathToFile);

            models[model.name] = model.model;

            if (model.mock) models[model.name]._mock_ = model.mock;
        }, ['mocks']);
    }());


    function readDir(dir, fileHandler, ignoredDirs) {
        var files = fs.readdirSync(dir);

        files.forEach(function(fileName) {
            var pathToFile = dir + '/' + fileName,
                stat = fs.statSync(pathToFile);

            if (stat.isFile()) {
                fileHandler(pathToFile);
            }
            else if (stat.isDirectory()) {
                if (!ignoredDirs || !~ignoredDirs.indexOf(path.basename(pathToFile))) {
                    readDir(pathToFile, fileHandler);
                }
            }
        });
    }
})();

(function() {
    var db,
        appMongoData = config.mongodb;

    mongoose.connect(appMongoData.host, appMongoData.dbname, appMongoData.port);

    db = mongoose.connection;

    db.once('open', function() {
        log('info', 'Mongoose was connected successfully.');

        if (process.argv.indexOf('--mock-data') !== -1) {
            require(PATHS.LIBS + '/mockData.js').then(function() {
                require('local/server.js');
            });
        }
        else {
            require('local/server.js');
        }
    });

    db.once('error', function(err) {
        log('error', 'Mongoose connection error');

        process.exit(); // todo: [1] [2]
    });
})();
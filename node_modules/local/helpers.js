var util = require('util'),
    Helpers = {};

require('./lib/deepExtend.js');

Helpers.extend = function(base, _props, dontCopyProps, recursiveCopyProps) {
    var result,
        props = {};

    recursiveCopyProps = recursiveCopyProps || [];

    Object.keys(_props).forEach(function(propName) {
        var newprop,
            prop = _props[propName];

        if (typeof prop === 'function') {
            newprop = function() {
                var result,
                    tmp = this._super;

                this._super = base[propName] || function() {};
                result = prop.apply(this, arguments);
                this._super = tmp;

                return result;
            }
        }
        else {
            newprop = prop;
        }

        if (!~recursiveCopyProps.indexOf(propName)) {
            props[propName] = {
                value: newprop,
                writable: true,
                enumerable: true,
                configurable: true
            };
        }

        recursiveCopyProps.forEach(function(propName) {
            props[propName] = {
                value: copyRecursiveProp(base, _props, propName),
                writable: true,
                enumerable: true,
                configurable: true
            };
        });
    });

    if (dontCopyProps) {
        Object.keys(dontCopyProps).forEach(function(propName) {
            if (!props.hasOwnProperty(propName)) {
                props[propName] = {
                    value: dontCopyProps[propName],
                    writable: true,
                    enumerable: true,
                    configurable: true
                }; // TODO: clone ?
            }
        });
    }

    function copyRecursiveProp(base, props, propName) {
        var result, baseKeys, newKeys,
            baseProp = base[propName],
            newProp = props[propName];

        if (props.hasOwnProperty(propName)) {
            if (isNativeObject(newProp)) {
                if (base.hasOwnProperty(propName) && isNativeObject(baseProp)) {
                    baseKeys = Object.keys(baseProp);
                    newKeys = Object.keys(newProp);

                    result = {};

                    newKeys.forEach(function(newKey) {
                        result[newKey] = copyRecursiveProp(baseProp, newProp, newKey);
                    });

                    baseKeys.forEach(function(baseKey) {
                        if (!result.hasOwnProperty(baseKey)) result[baseKey] = baseProp[baseKey];
                    });
                }
                else {
                    result = newProp;
                }
            }
            else {
                result = newProp;
            }
        }
        else {
            result = base.hasOwnProperty(propName) ? base[propName] : null;
        }

        return result;
    }

    function isNativeObject(obj) { // !!!
        return typeof obj === 'object' && !util.isArray(obj) && obj !== null;
    }

    result = Object.create(base, props);

    return result;
};

Helpers.extendController = function(base, props, recursiveCopyProps) {
    return Helpers.extend(base, props, {
        name: null,
        isAbstract: false,
        init: null
    }, recursiveCopyProps || null);
};

Helpers.extendCRUDController = function(base, props) {
    return Helpers.extendController(base, props, ['proxy', 'create', 'read', 'update', 'delete']);
};

Helpers.getArray = function(obj) {
    return [].concat(obj || []);
};

Helpers.generateRandomToken = function() {
    var x, i,
        chars = "_!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
        token = new Date().getTime() + '_';

    for (x = 0; x < 16; x++) {
        i = Math.floor(Math.random() * 62);
        token += chars.charAt(i);
    }

    return token;
};

Helpers.randomChance = function(chance) {
    return Math.random() < (chance * 0.01);
};

Helpers.randomBetween = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min
};

Helpers.randomFromArray = function(arr, chance) {
    return arr.filter(function(item) {
        return Helpers.randomChance(chance);
    });
};

Helpers.capitalize = function(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
};

Helpers.isNumber = function(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
};

Helpers.isEmpty = function(val) {
	var type = typeof val;

    if (null === val) {
        return true;
    }
	else if ('undefined' == type) {
		return true;
	}
	else if ('string' == type) {
		return '' === val;
	}
	else if ('object' == type) {
		return !Object.keys(val).length;
	}

	return false;
};

Helpers.getVideoImgDefault = function(type) {
	var path = null;
	switch(type) {
		default:
			path = '/images/video_processing_min.jpg';
		break
		case 'thumb': 
			path = '/images/video_processing_min.jpg';
		break
		case 'medium':
			path = '/images/video_processing_mid.jpg';
		break
	}
	return path;
};
Helpers.generateMetatag = function(name, content, property){
    return '<meta ' +(name ? 'name="'+ name + '"' : '' )
                    + (!_.isUndefined(property) || !_.isNull(property) ? ' property="'+ property + '"' : '' )
                    + (content ? ' content="'+ content + '"' : '' ) + ' '
                    + '/>';
};

Helpers.parseOutputContent = function(content) {
	if (!content) return content;
	if ('' == content || 'undefined' == typeof(content)) return content;
// 	var link_pattern = /\b(?:(?:https?|ftp|file):\/\/www\.|ftp\.)[-A-Z0-9+&@#\/%=~_|$?!:,.]*[A-Z0-9+&@#‌​\/%=~_|$]/i;
	var url_pattern = /(\b(https?|ftp|file):\/\/[\-A-Z0-9+&@#\/%?=~_|!:,.;]*[\-A-Z0-9+&@#\/%=~_|])/ig;
	content = content.replace(url_pattern, function(result) {
//		var result = '<a href="'+result+'">'+result+'</a>'; 
		return '<a href="'+result+'" target="_blank" class="link_location">'+result+'</a>';
	});
	return content;
}


Helpers.compareIds = function(fId, sId) {
	if (!fId || !sId) return false;
	return (fId.toString() === sId.toString()) ? true : false;
}	

Helpers.nl2br = function(content) {
	if (!content) return content;
	if ('' == content || 'undefined' == typeof(content)) return content;
	var pattern = /\r?\n/g;
	content = content.toString().replace(pattern, "<br/>");
	return content;
}

//not including daylight savings time
Helpers.calcLocationTime = function(gmtOffset) {
    var localDate = new Date();
    var utc_msecs = localDate.getTime() + (localDate.getTimezoneOffset() * 60000); //60 * 1000
    var nd = new Date(utc_msecs + (gmtOffset* 3600000)); //1000 * 60 * 60
	return nd;
}

Helpers.getFormatAMPM = function(date) {
	var hours = date.getHours();
	var minutes = date.getMinutes();
	var ampm = hours >= 12 ? 'pm' : 'am';
	hours = hours % 12;
	hours = hours ? hours : 12; // the hour '0' should be '12'
	minutes = minutes < 10 ? '0'+minutes : minutes;
	var strTime = hours + ':' + minutes + ' ' + ampm;
	return strTime;
}


Helpers.truncate = function(string, count, useHellip, useWordBoundary) {
	var toLong = string.length > count,
		s_ = toLong ? string.substr(0,count-1) : string;
	s_ = useWordBoundary && toLong ? s_.substr(0,s_.lastIndexOf(' ')) : s_;
	return  toLong ? s_ + (useHellip && toLong ? '&hellip;' : '') : s_;
}


module.exports = Helpers;
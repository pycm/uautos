log('Generating mocks data.');

var modelsDeps = {},
    modelsGens = {},
    modelsToProcess = [],
    passedDeps = [],
    d = Q.defer();

isMockDataGeneration = true;

Object.keys(models).forEach(function(modelName) {
    var model = models[modelName],
        mock = model._mock_ || {};

    model.find().remove();
    log('Clear "' + modelName + '" data.');

    modelsToProcess.push(modelName);
    modelsDeps[modelName] = helpers.getArray(mock.dependencies);
    modelsGens[modelName] = mock.generator || null;
});

processDeps();

function processDeps() {
    var stepModels = [],
        stepGens = [];

    modelsToProcess.forEach(function(modelName) {
        var modelDeps = modelsDeps[modelName],
            isFreeToProcessModel = true;

        modelDeps.forEach(function(modelDepName) {
            if (passedDeps.indexOf(modelDepName) === -1) {
                if (!models[modelDepName]) {
                    log('error', 'Dependency ' + modelDepName + ' is not found.');
                    passedDeps.push(modelDepName);
                }
                else {
                    isFreeToProcessModel = false;
                }
            }
        });

        if (isFreeToProcessModel) {
            stepModels.push(modelName);
        }
    });

    if (modelsToProcess.length && !stepModels.length) {
        isMockDataGeneration = false;
        log('error', 'Recursive deps in mocks generator. Generator is stopped.');
        d.resolve();
    }
    else {
        stepModels.forEach(function(modelName) {
            modelsToProcess.splice(modelsToProcess.indexOf(modelName), 1);

            if (modelsGens[modelName]) stepGens.push(Q.fcall(modelsGens[modelName]));

            passedDeps.push(modelName);
        });

        Q.allResolved(stepGens).then(function(promises) {
            promises.forEach(function (promise) {
                if (!promise.isFulfilled()) {
                    log('error', promise.valueOf().exception.toString());
                }
            });

            if (modelsToProcess.length) processDeps();
            else {
                isMockDataGeneration = false;
                log('info', 'Data generation done.');
                d.resolve();
            }
        });
    }
}

module.exports = d.promise;
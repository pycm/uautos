function checkIfFieldExists (stor, env, fieldName, fieldDisplay) {
    if (!stor.params[fieldName]) {
        env.flash('error', 'Field "' + (fieldDisplay || fieldName) + '" is required.');
        stor.isError = true;
        stor.savedForError[fieldName] = stor.params[fieldName];
        return false;
    } 
    else {
        stor.savedForSuccess[fieldName] = stor.params[fieldName];
    }
    return true;
}

function checkFieldMaxLength (stor, env, fieldName, maxLength, tough, fieldDisplay) {
    if (stor.params[fieldName] && stor.params[fieldName].length > maxLength) {
        if (tough) {
            env.flash('error', 'The maximum number of characters allowed for field "' + (fieldDisplay || fieldName) + '" is ' + maxLength + '.');
            stor.isError = true;
            stor.savedForError[fieldName] = stor.params[fieldName];
        }
        else {
            env.flash('info', 'Field + "' + (fieldDisplay || fieldName) + '" was truncated to ' + maxLength + ' characters.');
            stor.savedForSuccess[fieldName] = stor.params[fieldName].substr(0, maxLength);
        }
    }
    else {
        stor.savedForSuccess[fieldName] = stor.params[fieldName];
    }
}

function checkIfCountryExistsInDB (stor, env, fieldName) {
    var countryD = Q.defer(),
        param = stor.params[fieldName] && stor.params[fieldName].toUpperCase();

    if (param) {
        models.Country.findById(param, function(err, doc) {
            if (!err && !doc) {
                env.flash('error', 'Your country does not exist.');
                stor.isError = true;
                stor.savedForError.country = doc ? doc.toJSON({ virtuals: true }) : null;
            }
            else if (err) {
                env.flash('error', 'Error when saving country.');
                log('error', 'Error 549', err.toString());
                stor.isError = true;
                stor.savedForError.country = doc ? doc.toJSON({ virtuals: true }) : null;
            }
            else {
                stor.savedForSuccess.country = doc ? doc.toJSON({ virtuals: true }) : null;
            }

            countryD.resolve();
        });
    }
    else{
        countryD.resolve();
    }

    return countryD.promise;
}

function checkIfCityExistsInDB (stor, env, fieldName) {
    var cityD = Q.defer(),
        city = stor.params[fieldName];

    if (city) {
        models.City.findById(city, function(err, doc) {
            if (!err && !doc) {
                env.flash('error', 'Your city does not exist.');
                stor.isError = true;
                stor.savedForError.city = doc ? doc.toJSON({ virtuals: true }) : null;
            }
            else if (err) {
                env.flash('error', 'Error when saving city.');
                log('error', 'Error 550', err.toString());
                stor.isError = true;
                stor.savedForError.city = doc ? doc.toJSON({ virtuals: true }) : null;
            }
            else {
                stor.savedForSuccess.city = doc;
            }

            //stor.savedForError.city = doc ? doc.toJSON({ virtuals: true }) : null;

            cityD.resolve();
        });
    }
    else {
        cityD.resolve();
    }

    return cityD.promise;
}

function checkGender(stor, env, fieldName) {
    var gender = stor.params[fieldName];

    console.log(gender);

    if (['male', 'female'].indexOf(gender) === -1) {
        env.flash('error', 'Invalid gender.');
        stor.isError = true;
    }
}

function checkPassword(stor, env, fieldName) {
    var password = stor.params[fieldName];

    if (password) {
        if (password.length < 6 || password.length > 255) {
            env.flash('error', 'Password must be 6-255 characters.');
            stor.isError = true;
        }
    }
}

function checkPasswordMatch(stor, env, fieldName) {
    var passD = Q.defer(),
        oldPass = stor.params[fieldName];

    if (oldPass) {
        models.Profile.findOne({ login: stor.params.login }, function(err, doc) {
            if (!err && doc) {
                if (!doc.verifyPassword(oldPass)) {
                    env.flash('error', 'Old password doesn\'t match. ');
                    stor.isError = true;
                }
            }
            else {
                env.flash('error', 'Can\'t check password.');
                stor.isError = true;
            }

            passD.resolve();
        });
    }
    else {
        passD.resolve();
    }

    return passD.promise;
}

function checkTags(stor, env, fieldName) {
    var tags = stor.params[fieldName];

    if (!tags) {
        env.flash('error', 'Field "Tags" is required.');
        stor.isError = true;
    }
    else if (tags.length < 1) {
        env.flash('error', 'You must pick at least one tag.');
        stor.isError = true;
    }
}

function checkEmail(stor, env, fieldName) {
    // todo: check email
}

function checkDate(stor, env, fieldName) {
    // todo: check email
}

module.exports = {
    checkIfFieldExists: checkIfFieldExists,
    checkFieldMaxLength: checkFieldMaxLength,
    checkIfCountryExistsInDB: checkIfCountryExistsInDB,
    checkIfCityExistsInDB: checkIfCityExistsInDB,
    checkPasswordMatch: checkPasswordMatch,
    checkGender: checkGender,
    checkPassword: checkPassword,
    checkEmail: checkEmail,
    checkDate: checkDate,
    checkTags: checkTags
};

function getMessages(errors, entity, onlyTexts) {
    var errs = _.deepExtend(errors);

    Object.keys(errs).forEach(function(fieldName) {
        var message = '',
            error = errs[fieldName];

        switch (error.type) {
            case 'required':
                message = 'Field "%field%" is required.';
                break;
            case 'maxlength':
                if (['content', 'fileCaption'].indexOf(fieldName) !== -1) {
                    message = 'The maximum number of characters allowed for field "%field%" is 1000.';
                }
                else {
                    message = 'The maximum number of characters allowed for field "%field%" is 255.';
                }
                break;
            case 'exists':
                message = 'Value for field "%field%" is wrong.';
                break;
            case 'enum':
                message = 'Value for field "%field%" is wrong.';
                break;
            case 'unexpected':
                message = 'Unexpected error for field "%field%"';
                break;
        }

        error.message = message.replace('%field%', getFieldDisplay(fieldName, entity));
    });

    return onlyTexts ? Object.keys(errs).map(function(fieldName) {
        return errs[fieldName].message;
    }) : errs;
}

function getFieldDisplay (fieldName, entity) {
    var display;

    switch (fieldName) {
        case 'fileCaption':
            display = 'File Caption';
            break;
        default:
            display = fieldName;
    }

    return helpers.capitalize(display);
}

module.exports = {
    getMessages: getMessages
};
function init (app) {
    var allRoutes = [];

    // console.log('\nLocal router init');

    Object.keys(controllers).forEach(function(controllerName) {
        var routes,
            controller = controllers[controllerName];

//        console.log('Controller: ' + controllerName);

        if (controller.mapping) {
            routes = controller.mapping();

            if (routes) {
                Object.keys(routes).forEach(function(routeName) {
                    var route = routes[routeName];

                    // console.log('Route: ' + route.path);

                    route.name = routeName;
                    route.priority = route.priority || 0;

                    allRoutes.push([route, controller]);
                });
            }
        }
    });

    allRoutes.sort(function(a, b) {
        var aPr = a[0].priority,
            bPr = b[0].priority;

        return aPr > bPr ? 1 : (aPr < bPr ? -1 : 0);
    });


    allRoutes.forEach(function(rItem) {
        var route = rItem[0],
            controller = rItem[1],
            routeTypes = route.type;

        if (!routeTypes) routeTypes = 'GET';
        routeTypes = [].concat(routeTypes || []);

        routeTypes.forEach(function(type) {
            app[type.toLowerCase()](route.path, function(req, res, next) {
                var mws, mvFunc,
                    possibleMws = [route.middlewares || null, controller.middlewares || null];

                req.env = {
                    controller: controller,
                    action: route.name,
                    route: route,
                    middlewares: null
                };

                while ((mvFunc = possibleMws.shift()) !== undefined) {
                    if (mvFunc) {
                        if (typeof mvFunc === 'string') mvFunc = controller[mvFunc];

                        mws = mvFunc.call(controller, req);

                        break;
                    }
                }

                req.env.middlewares = [].concat(mws || []);

                next();
            });
        });
    });
}

function route (req, res, next) {
    var controller = req.env.controller,
        route = req.env.route;

    controller.exec(route, req, res, next);
}

module.exports = {
    init: init,
    route: route
};
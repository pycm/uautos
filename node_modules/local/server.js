var express = require('express'),
    partials = require('express-partials'),
    ejs = require('ejs'),
    env = require(PATHS.LIBS + '/env.js'),
    localRouter = require(PATHS.LIBS + '/router.js'),
    mongoStore = require('connect-mongo')(express),
    flash = require('connect-flash'),
    mongoConfig = config.mongodb;

app = express(); // GLOBAL variable

app.usefix = function (key, handler, ctx) {
    app.use(function(req, res, next) {
        if (req.env.middlewares && ~req.env.middlewares.indexOf(key)) {
            // console.log(key);

            if (ctx) handler.call(ctx, req, res, next);
            else handler(req, res, next);
        }
        else {
            next();
        }
    });

    return app;
};

express.logger.token('rid', function(req, res) {
    req._id_ = req._id_ || helpers.generateRandomToken();

    return req._id_;
})

// Static. We should return this asap.

app
    .use(function(req, res, next) {
        req._startTime_ = new Date();

        next();
    })

    .use(express.favicon(PATHS.APP + '/favicon.ico', { maxAge: 2592000000 }))

    .use(express.static(PATHS.PUBLIC))

    .use(express.static(PATHS.UPLOADS));

// End static.

// Dynamic.

app
    .use(app.router)

    .use(function(req, res, next) {
        console.log('\n'); // for requests separation
        next();
    })

    .use(express.logger({ immediate: true, format: 'Start :method :url | Date: :date | Remote address: :remote-addr (:rid)' }))

    .use(express.logger('Finish :method :url | :res[Content-Length] | :response-time ms (:rid)'))

    .usefix('cookie', express.cookieParser(), express)

    .usefix('session', express.session({
        cookie: {
            maxAge: 1800000 * 6 // 3 hours
        },
        secret: 'SuPeR Urgent Secret 234y87y87y234',
        store: new mongoStore({
            host: mongoConfig.host,
            port: mongoConfig.port,
            db: mongoConfig.dbname,
            collection: '_session'
        })
    }), express)

    .usefix('env', env)

    .usefix('body', express.bodyParser({
        uploadDir: PATHS.UPLOADS,
        keepExtensions: true
    }), express)

    .usefix('partials', partials())

    .usefix('flash', flash())

    .use(express.limit('2500mb'))

    .use(localRouter.route)

// End dynamic.

// Configure.


// End configure.

// Error handling.

// todo: [3]

// End error handling.

// View engine.

app
    .engine('.html', ejs.__express)

    .set('views', PATHS.VIEWS)

    .set('view engine', 'html');

// End view engine.

app.listen(config.web.port);

localRouter.init(app);

log('Server was started at port ' + config.web.port + '.');